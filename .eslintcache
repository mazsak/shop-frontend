[{"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\index.js":"1","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\App.js":"2","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\reportWebVitals.js":"3","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Home.js":"4","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Profile.js":"5","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Error.js":"6","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\NavBar.js":"7","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\requests\\directory.js":"8","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\api\\API.js":"9","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\ItemProduct.js":"10","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Pagination.js":"11","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\requests\\product.js":"12","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Product.js":"13","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Cart.js":"14","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Register.js":"15","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Login.js":"16"},{"size":658,"mtime":1610567865848,"results":"17","hashOfConfig":"18"},{"size":933,"mtime":1610562607452,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":6397,"mtime":1610484044482,"results":"21","hashOfConfig":"18"},{"size":285,"mtime":1610476569524,"results":"22","hashOfConfig":"18"},{"size":279,"mtime":1610473947739,"results":"23","hashOfConfig":"18"},{"size":724,"mtime":1610491395986,"results":"24","hashOfConfig":"18"},{"size":161,"mtime":1610483805503,"results":"25","hashOfConfig":"18"},{"size":103,"mtime":1608668815113,"results":"26","hashOfConfig":"18"},{"size":687,"mtime":1610484393150,"results":"27","hashOfConfig":"18"},{"size":1695,"mtime":1610475535834,"results":"28","hashOfConfig":"18"},{"size":429,"mtime":1610559644190,"results":"29","hashOfConfig":"18"},{"size":2380,"mtime":1610645706945,"results":"30","hashOfConfig":"18"},{"size":3116,"mtime":1610646272525,"results":"31","hashOfConfig":"18"},{"size":3794,"mtime":1610546641099,"results":"32","hashOfConfig":"18"},{"size":2177,"mtime":1610547483633,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"ctwcct",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\index.js",[],["70","71"],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\App.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\reportWebVitals.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Home.js",["72"],"import React, { useState, useEffect } from 'react';\r\nimport NavBar from './NavBar';\r\nimport ItemProduct from './ItemProduct';\r\nimport { GetAllDirectory } from './../requests/directory';\r\nimport { GetProducts } from './../requests/product';\r\nimport { viewPagination } from './Pagination';\r\nimport {\r\n    Accordion,\r\n    Card,\r\n    Spinner,\r\n    Button,\r\n    Pagination\r\n} from 'react-bootstrap';\r\n\r\nconst Home = (props) => {\r\n    const [directories, setDirectories] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    const [isLoadingDirectiories, setIsLoadingDirectiories] = useState(true);\r\n    const [isLoadingProducts, setIsLoadingProducts] = useState(true);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [totalPage, setTotalPage] = useState(1);\r\n    const [currentDirectory, setCurrentDirectory] = useState('');\r\n    const [currentSubdirectory, setCurrentSubdirectory] = useState('');\r\n\r\n\r\n    const loadProducts = async (directory, subdirectory, pageNumber) => {\r\n        setIsLoadingProducts(true);\r\n\r\n        const resultProduct = await GetProducts(directory, subdirectory, pageNumber);\r\n\r\n        setProducts(resultProduct.products);\r\n        setCurrentPage(resultProduct.currentPage);\r\n        setTotalPage(resultProduct.totalPages);\r\n\r\n        setIsLoadingProducts(false);\r\n    };\r\n\r\n    const fetchData = async () => {\r\n        setIsLoadingDirectiories(true);\r\n\r\n        const resultDirectory = await GetAllDirectory();\r\n        setDirectories(resultDirectory);\r\n        setCurrentDirectory(resultDirectory[0].name)\r\n\r\n        setIsLoadingDirectiories(false);\r\n\r\n        loadProducts(resultDirectory[0].name, '', currentPage)\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <NavBar />\r\n            </nav>\r\n            <div className='row' style={{ width: '95%', marginLeft: 'auto', marginRight: 'auto' }}>\r\n                <div className='col-2' style={{ padding: '20px', minWidth: '300px' }}>\r\n                    {isLoadingDirectiories && directories.length === 0 ? (\r\n                        <Card bg='dark' text='white' style={{ padding: '10px', display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                            <Spinner animation=\"grow\" variant=\"light\" />\r\n                        </Card>\r\n                    ) : (\r\n                            <Accordion >\r\n                                {directories.map((item, index) =>\r\n                                    <Card bg='dark' text='white'>\r\n                                        <Accordion.Toggle as={Button} variant=\"link\" onClick={ async () => {\r\n                                            setCurrentDirectory(item.name);\r\n                                            setCurrentSubdirectory('')\r\n                                            setCurrentPage(1);\r\n                                            loadProducts(item.name, '',1);\r\n                                        }} eventKey={item.id}>{item.name}</Accordion.Toggle>\r\n                                        <Accordion.Collapse eventKey={item.id} key={item.id}>\r\n                                            <Card.Body>\r\n                                                {item.subdirectories.map((subdirectory) =>\r\n                                                    <div className='row' style={{ paddingLeft: '20px' }}>\r\n                                                        <a href={'#' + subdirectory.name} onClick={async () => {\r\n                                            setCurrentSubdirectory(subdirectory.name);\r\n                                            setCurrentPage(1);\r\n                                            loadProducts(currentDirectory, subdirectory.name, 1);\r\n                                        }}>{subdirectory.name}</a>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Card.Body>\r\n                                        </Accordion.Collapse>\r\n                                    </Card>\r\n                                )}\r\n                            </Accordion>\r\n                        )}\r\n                </div>\r\n                <div className='col' style={{ padding: '20px' }}>\r\n                    <Card bg='dark' text='white' style={{ padding: '10px' }}>\r\n                        <h3>Products from: {currentDirectory}{currentSubdirectory !== '' ? ', ' + currentSubdirectory : ''}</h3>\r\n                    </Card>\r\n                    {isLoadingProducts && products.length === 0 ? (\r\n                        <Card bg='dark' text='white' style={{ padding: '10px', display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                            <Spinner animation=\"grow\" variant=\"light\" />\r\n                        </Card>\r\n                    ) :\r\n                        (\r\n\r\n                            <div>\r\n                                <Card bg='dark' text='white' style={{ padding: '10px', display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                                    <Pagination onClick={(e) => {\r\n                                        loadProducts(currentDirectory, currentSubdirectory, Number(e.target.id))\r\n                                    }}>\r\n                                        {viewPagination(totalPage, currentPage)}\r\n                                    </Pagination>\r\n                                </Card>\r\n                                {products.map((product) =>\r\n                                    <ItemProduct item={product} />\r\n                                )}\r\n                                <Card bg='dark' text='white' style={{ padding: '10px', display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                                    <Pagination onClick={(e) => {\r\n                                        loadProducts(currentDirectory, currentSubdirectory, Number(e.target.id))\r\n                                    }}>\r\n                                        {viewPagination(totalPage, currentPage)}\r\n                                    </Pagination>\r\n                                </Card>\r\n                            </div>\r\n                        )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Profile.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Error.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\NavBar.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\requests\\directory.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\api\\API.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\ItemProduct.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Pagination.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\requests\\product.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Product.js",["73"],"import React, { useState, useEffect } from 'react';\r\nimport NavBar from './NavBar';\r\nimport { GetProductById } from './../requests/product';\r\nimport {\r\n    Card,\r\n    Row,\r\n    Col,\r\n    Spinner,\r\n    Button\r\n} from 'react-bootstrap';\r\n\r\nconst Product = (props) => {\r\n    const [product, setProduct] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const fetchData = async () => {\r\n        setIsLoading(true);\r\n\r\n        const result = await GetProductById(props.match.params.id);\r\n        setProduct(result);\r\n\r\n        setIsLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <NavBar />\r\n            </nav>\r\n            <div style={{ width: '80%', marginLeft: 'auto', marginRight: 'auto' }}>\r\n                {isLoading ? (\r\n                    <Card bg='dark' text='white' style={{ padding: '10px', margin: '20px' }}>\r\n                        <Spinner animation=\"grow\" variant=\"light\" />\r\n                    </Card>\r\n                ) : (\r\n                        <Card bg='dark' text='white' style={{ padding: '10px', margin: '20px' }}>\r\n                            <Row>\r\n                                <div className='col'>\r\n                                    <h3>{product.name}</h3>\r\n                                </div>\r\n                                <div className='col-3'>\r\n                                    <h4>{product.price} $</h4>\r\n                                    <p>Amount in stock: {product.stockAmount}</p>\r\n                                    <Button onClick={() => {\r\n                                        var products = JSON.parse(localStorage.getItem('products'));\r\n                                        products.push(product)\r\n                                        localStorage.setItem('products', JSON.stringify(products));\r\n                                    }}>Buy</Button>\r\n                                </div>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                <span>{product.description}</span>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card>\r\n                    )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Product;\r\n\r\n","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Cart.js",["74"],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Register.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Login.js",["75","76"],"import React, { useState } from 'react';\r\nimport NavBar from './NavBar';\r\nimport {\r\n    Card,\r\n    Spinner,\r\n    Form,\r\n    Button,\r\n    Alert\r\n} from 'react-bootstrap';\r\n\r\nconst Login = (props) =>{\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [showError, setShowError] = useState(false);\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <NavBar />\r\n            </nav>\r\n            <div style={{ width: '50%', marginLeft: 'auto', marginRight: 'auto' }}>\r\n                <Card bg='dark' text='white' style={{ padding: '10px', margin: '10px', display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                    <Form style={{width: '90%', marginLeft: 'auto', marginRight: 'auto'}}>\r\n                        <Alert show={showError} variant=\"danger\">Incorrect username or password</Alert>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"username\">Username</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                id=\"username\"\r\n                                onChange={(e) => setUsername(e.target.value)}\r\n                            />\r\n                            <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                            />\r\n                        </Form.Group>\r\n                    </Form>\r\n                    <Button type=\"submit\" href=\"/login\" onClick={() => {\r\n                        setIsLoading(true);\r\n                        setShowError(false);\r\n                        \r\n                        setIsLoading(false);\r\n                    }}>Register</Button>\r\n                    <Spinner animation=\"grow\" variant=\"light\" hidden={!isLoading} />\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n",{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":52,"column":8,"nodeType":"83","endLine":52,"endColumn":10,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"82","line":26,"column":8,"nodeType":"83","endLine":26,"endColumn":10,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":13,"column":22,"nodeType":"88","messageId":"89","endLine":13,"endColumn":33},{"ruleId":"86","severity":1,"message":"90","line":13,"column":12,"nodeType":"88","messageId":"89","endLine":13,"endColumn":20},{"ruleId":"86","severity":1,"message":"91","line":14,"column":12,"nodeType":"88","messageId":"89","endLine":14,"endColumn":20},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["94"],["95"],"no-unused-vars","'setProducts' is assigned a value but never used.","Identifier","unusedVar","'username' is assigned a value but never used.","'password' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"96","fix":"98"},"Update the dependencies array to be: [fetchData]",{"range":"99","text":"100"},{"range":"101","text":"100"},[1741,1743],"[fetchData]",[630,632]]