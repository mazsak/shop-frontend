[{"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\index.js":"1","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\App.js":"2","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\reportWebVitals.js":"3","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Home.js":"4","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Profile.js":"5","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Error.js":"6","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\NavBar.js":"7","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\requests\\directory.js":"8","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\api\\API.js":"9","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\ItemProduct.js":"10","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Pagination.js":"11","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\requests\\product.js":"12","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Product.js":"13","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Cart.js":"14","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Register.js":"15","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Login.js":"16","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\requests\\user.js":"17","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Orders.js":"18","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Admin.js":"19"},{"size":862,"mtime":1610662425033,"results":"20","hashOfConfig":"21"},{"size":1121,"mtime":1610707203684,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":6397,"mtime":1610484044482,"results":"24","hashOfConfig":"21"},{"size":285,"mtime":1610476569524,"results":"25","hashOfConfig":"21"},{"size":279,"mtime":1610473947739,"results":"26","hashOfConfig":"21"},{"size":1598,"mtime":1610791652070,"results":"27","hashOfConfig":"21"},{"size":1882,"mtime":1610733434138,"results":"28","hashOfConfig":"21"},{"size":103,"mtime":1611009121803,"results":"29","hashOfConfig":"21"},{"size":687,"mtime":1610484393150,"results":"30","hashOfConfig":"21"},{"size":1695,"mtime":1610475535834,"results":"31","hashOfConfig":"21"},{"size":1321,"mtime":1610726359863,"results":"32","hashOfConfig":"21"},{"size":3449,"mtime":1610661688274,"results":"33","hashOfConfig":"21"},{"size":3695,"mtime":1610731084092,"results":"34","hashOfConfig":"21"},{"size":4778,"mtime":1610974624129,"results":"35","hashOfConfig":"21"},{"size":2763,"mtime":1610662685181,"results":"36","hashOfConfig":"21"},{"size":1145,"mtime":1610974624129,"results":"37","hashOfConfig":"21"},{"size":5195,"mtime":1610731096949,"results":"38","hashOfConfig":"21"},{"size":37000,"mtime":1610792538502,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"ctwcct",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\index.js",[],["83","84"],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\App.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\reportWebVitals.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Home.js",["85"],"import React, { useState, useEffect } from 'react';\r\nimport NavBar from './NavBar';\r\nimport ItemProduct from './ItemProduct';\r\nimport { GetAllDirectory } from './../requests/directory';\r\nimport { GetProducts } from './../requests/product';\r\nimport { viewPagination } from './Pagination';\r\nimport {\r\n    Accordion,\r\n    Card,\r\n    Spinner,\r\n    Button,\r\n    Pagination\r\n} from 'react-bootstrap';\r\n\r\nconst Home = (props) => {\r\n    const [directories, setDirectories] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    const [isLoadingDirectiories, setIsLoadingDirectiories] = useState(true);\r\n    const [isLoadingProducts, setIsLoadingProducts] = useState(true);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [totalPage, setTotalPage] = useState(1);\r\n    const [currentDirectory, setCurrentDirectory] = useState('');\r\n    const [currentSubdirectory, setCurrentSubdirectory] = useState('');\r\n\r\n\r\n    const loadProducts = async (directory, subdirectory, pageNumber) => {\r\n        setIsLoadingProducts(true);\r\n\r\n        const resultProduct = await GetProducts(directory, subdirectory, pageNumber);\r\n\r\n        setProducts(resultProduct.products);\r\n        setCurrentPage(resultProduct.currentPage);\r\n        setTotalPage(resultProduct.totalPages);\r\n\r\n        setIsLoadingProducts(false);\r\n    };\r\n\r\n    const fetchData = async () => {\r\n        setIsLoadingDirectiories(true);\r\n\r\n        const resultDirectory = await GetAllDirectory();\r\n        setDirectories(resultDirectory);\r\n        setCurrentDirectory(resultDirectory[0].name)\r\n\r\n        setIsLoadingDirectiories(false);\r\n\r\n        loadProducts(resultDirectory[0].name, '', currentPage)\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <NavBar />\r\n            </nav>\r\n            <div className='row' style={{ width: '95%', marginLeft: 'auto', marginRight: 'auto' }}>\r\n                <div className='col-2' style={{ padding: '20px', minWidth: '300px' }}>\r\n                    {isLoadingDirectiories && directories.length === 0 ? (\r\n                        <Card bg='dark' text='white' style={{ padding: '10px', display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                            <Spinner animation=\"grow\" variant=\"light\" />\r\n                        </Card>\r\n                    ) : (\r\n                            <Accordion >\r\n                                {directories.map((item, index) =>\r\n                                    <Card bg='dark' text='white'>\r\n                                        <Accordion.Toggle as={Button} variant=\"link\" onClick={ async () => {\r\n                                            setCurrentDirectory(item.name);\r\n                                            setCurrentSubdirectory('')\r\n                                            setCurrentPage(1);\r\n                                            loadProducts(item.name, '',1);\r\n                                        }} eventKey={item.id}>{item.name}</Accordion.Toggle>\r\n                                        <Accordion.Collapse eventKey={item.id} key={item.id}>\r\n                                            <Card.Body>\r\n                                                {item.subdirectories.map((subdirectory) =>\r\n                                                    <div className='row' style={{ paddingLeft: '20px' }}>\r\n                                                        <a href={'#' + subdirectory.name} onClick={async () => {\r\n                                            setCurrentSubdirectory(subdirectory.name);\r\n                                            setCurrentPage(1);\r\n                                            loadProducts(currentDirectory, subdirectory.name, 1);\r\n                                        }}>{subdirectory.name}</a>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Card.Body>\r\n                                        </Accordion.Collapse>\r\n                                    </Card>\r\n                                )}\r\n                            </Accordion>\r\n                        )}\r\n                </div>\r\n                <div className='col' style={{ padding: '20px' }}>\r\n                    <Card bg='dark' text='white' style={{ padding: '10px' }}>\r\n                        <h3>Products from: {currentDirectory}{currentSubdirectory !== '' ? ', ' + currentSubdirectory : ''}</h3>\r\n                    </Card>\r\n                    {isLoadingProducts && products.length === 0 ? (\r\n                        <Card bg='dark' text='white' style={{ padding: '10px', display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                            <Spinner animation=\"grow\" variant=\"light\" />\r\n                        </Card>\r\n                    ) :\r\n                        (\r\n\r\n                            <div>\r\n                                <Card bg='dark' text='white' style={{ padding: '10px', display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                                    <Pagination onClick={(e) => {\r\n                                        loadProducts(currentDirectory, currentSubdirectory, Number(e.target.id))\r\n                                    }}>\r\n                                        {viewPagination(totalPage, currentPage)}\r\n                                    </Pagination>\r\n                                </Card>\r\n                                {products.map((product) =>\r\n                                    <ItemProduct item={product} />\r\n                                )}\r\n                                <Card bg='dark' text='white' style={{ padding: '10px', display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                                    <Pagination onClick={(e) => {\r\n                                        loadProducts(currentDirectory, currentSubdirectory, Number(e.target.id))\r\n                                    }}>\r\n                                        {viewPagination(totalPage, currentPage)}\r\n                                    </Pagination>\r\n                                </Card>\r\n                            </div>\r\n                        )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Profile.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Error.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\NavBar.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\requests\\directory.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\api\\API.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\ItemProduct.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Pagination.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\requests\\product.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Product.js",["86"],"import React, { useState, useEffect } from 'react';\r\nimport NavBar from './NavBar';\r\nimport { GetProductById } from './../requests/product';\r\nimport {\r\n    Card,\r\n    Row,\r\n    Col,\r\n    Spinner,\r\n    Button,\r\n    Alert\r\n} from 'react-bootstrap';\r\n\r\nconst Product = (props) => {\r\n    const [product, setProduct] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [showError, setShowError] = useState(false);\r\n\r\n    const fetchData = async () => {\r\n        setIsLoading(true);\r\n\r\n        const result = await GetProductById(props.match.params.id);\r\n        setProduct(result);\r\n\r\n        setIsLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <NavBar />\r\n            </nav>\r\n            <div style={{ width: '80%', marginLeft: 'auto', marginRight: 'auto' }}>\r\n                {isLoading ? (\r\n                    <Card bg='dark' text='white' style={{ padding: '10px', margin: '20px' }}>\r\n                        <Spinner animation=\"grow\" variant=\"light\" />\r\n                    </Card>\r\n                ) : (\r\n                        <>\r\n                            <Alert show={showError} variant=\"danger\" style={{margin: '10px'}}>Product is out of stock!</Alert>\r\n                            <Card bg='dark' text='white' style={{ padding: '10px', margin: '20px' }}>\r\n                                <Row>\r\n                                    <div className='col'>\r\n                                        <h3>{product.name}</h3>\r\n                                    </div>\r\n                                    <div className='col-3'>\r\n                                        <h4>{product.price} $</h4>\r\n                                        <p>Amount in stock: {product.stockAmount}</p>\r\n                                        <Button onClick={() => {\r\n                                            var products = JSON.parse(localStorage.getItem('products'));\r\n                                            var amount = 0;\r\n                                            for (var i = 0; i < products.length; i++) {\r\n                                                if (products[i].id === product.id) {\r\n                                                    amount++;\r\n                                                }\r\n                                            }\r\n                                            if (amount < product.stockAmount) {\r\n                                                products.push(product)\r\n                                                localStorage.setItem('products', JSON.stringify(products));\r\n                                                setShowError(false);\r\n                                            } else {\r\n                                                setShowError(true);\r\n                                            }\r\n                                        }}>Add to cart</Button>\r\n                                    </div>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <span>{product.description}</span>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card>\r\n                        </>\r\n                    )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Product;\r\n\r\n","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Cart.js",["87"],"import React, { useState } from 'react';\r\nimport NavBar from './NavBar';\r\nimport ItemProduct from './ItemProduct';\r\nimport { FiTrash2 } from \"react-icons/fi\";\r\nimport {\r\n    Button,\r\n    Col,\r\n    Row,\r\n    Card\r\n} from 'react-bootstrap';\r\nimport { OrdersApi } from './../requests/user';\r\n\r\n\r\nconst Cart = (props) => {\r\n    const [products, setProducts] = useState(JSON.parse(localStorage.getItem('products')));\r\n    var totalPrice = 0.00;\r\n\r\n    for (var i = 0; i < products.length; i++) {\r\n        totalPrice += products[i].price;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <NavBar />\r\n            </nav>\r\n            <div style={{ marginTop: '20px', width: '60%', marginLeft: 'auto', marginRight: 'auto' }}>\r\n                {products.map((product) =>\r\n                (\r\n                    <Card bg='dark' text='white'>\r\n                        <Row>\r\n\r\n                            <Col >\r\n                                <ItemProduct id={product.id} item={product} />\r\n                            </Col>\r\n                            <Col style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                                <h4>{product.price} $</h4>\r\n                            </Col>\r\n                            <Col xs style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                                <Button href='/cart' onClick={() => {\r\n                                    var index = -1;\r\n                                    for (var i = 0; i < products.length; i++) {\r\n                                        if (products[i].id === product.id) {\r\n                                            index = i;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    if (index > -1) {\r\n                                        products.splice(index, 1);\r\n                                    }\r\n\r\n                                    localStorage.setItem('products', JSON.stringify(products));\r\n\r\n                                }}>\r\n                                    <FiTrash2 />\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Card>\r\n                ))}\r\n                <Card bg='dark' text='white' style={{ marginTop: '20px', padding: '10px' }}>\r\n                    <Row>\r\n                        <Col style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                            <h4>Total price:</h4>\r\n                        </Col>\r\n                        <Col style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                            <h4>{totalPrice.toFixed(2)} $</h4>\r\n                        </Col>\r\n                        <Col xs style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                            <Button href='#' onClick={ async () =>{\r\n                                if (JSON.parse(localStorage.getItem('token')) !== ''){\r\n                                    await OrdersApi();\r\n                                    localStorage.setItem('products', JSON.stringify([]));\r\n                                    document.location.href = '/cart';\r\n                                }else{\r\n                                    document.location.href = '/login';\r\n                                }\r\n                            }}>Buy</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;\r\n","F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Register.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Login.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\requests\\user.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Orders.js",[],"F:\\Projects\\UCZELNIA\\shop\\shop-frontend\\src\\components\\Admin.js",["88"],"import React, { useState, useEffect } from 'react';\r\nimport NavBar from './NavBar';\r\nimport { FiPlus, FiTrash2, FiEdit } from \"react-icons/fi\";\r\nimport {\r\n    Button,\r\n    Col,\r\n    Row,\r\n    Card,\r\n    Spinner,\r\n    Table,\r\n    Form\r\n} from 'react-bootstrap';\r\nimport { GetAllDirectory, DeleteDirectoryById, CreateDirectory, UpdateDirectory, GetAllSubdirectory, DeleteSubdirectoryById, CreateSubdirectory, UpdateSubdirectory } from './../requests/directory';\r\nimport { GetAllProducts, DeleteProductById, CreateProduct, UpdateProduct } from './../requests/product';\r\n\r\n\r\nconst Admin = (props) => {\r\n    const [directories, setDirectories] = useState([]);\r\n    const [directory, setDirectory] = useState('');\r\n    const [subdirectoriesUnassigned, setSubdirectoriesUnassigned] = useState([]);\r\n    const [subdirectories, setSubdirectories] = useState([]);\r\n    const [subdirectory, setSubdirectory] = useState('');\r\n    const [products, setProducts] = useState([]);\r\n    const [product, setProduct] = useState('');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [view, setView] = useState('list');\r\n    const [currentModel, setCurrentModel] = useState('Directory');\r\n\r\n    const fetchData = async () => {\r\n        setIsLoading(true);\r\n\r\n        setDirectories(await GetAllDirectory());\r\n        setSubdirectories(await GetAllSubdirectory());\r\n        setProducts(await GetAllProducts());\r\n\r\n        setIsLoading(false);\r\n    };\r\n\r\n    const load = () => {\r\n        const unassigned = [];\r\n\r\n        for (var i =0; i < subdirectories.length; i++){\r\n            var un = true;\r\n            for (var j = 0; j < directories.length; j++){\r\n                for (var s =0; s < directories[j].subdirectories.length; s++){\r\n                    if (subdirectories[i].id === directories[j].subdirectories[s].id){\r\n                        un = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (un === false){\r\n                    break;\r\n                }\r\n            }\r\n            if (un === true){\r\n                unassigned.push(subdirectories[i]);\r\n            }\r\n        }\r\n        console.log(unassigned)\r\n        setSubdirectoriesUnassigned(unassigned);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <NavBar />\r\n            </nav>\r\n            <Row>\r\n                <div className='col-3' style={{ margin: '20px' }}>\r\n                    {['Directory', 'Subdirectory', 'Product'].map((model) => (\r\n                        <Card bg='dark' text='white' style={{ padding: '10px' }}>\r\n                            <Row>\r\n                                <Col>\r\n                                    <a href='#' onClick={() => {\r\n                                        setView('list');\r\n                                        setCurrentModel(model);\r\n                                        setDirectory('');\r\n                                        setSubdirectory('');\r\n                                        setProduct('');\r\n                                    }}>\r\n                                        <h4>{model}</h4>\r\n                                    </a>\r\n                                </Col>\r\n                                <div className='col-2'>\r\n                                    <Button onClick={() => {\r\n                                        if (model === 'Directory'){\r\n                                            load();\r\n                                        }\r\n                                        setView('add');\r\n                                        setCurrentModel(model);\r\n                                        setDirectory('');\r\n                                        setSubdirectory('');\r\n                                        setProduct('');\r\n                                    }}><FiPlus /></Button>\r\n                                </div>\r\n                            </Row>\r\n                        </Card>\r\n                    ))}\r\n                </div>\r\n                <Col xl>\r\n                    <Card bg='dark' text='white' style={{ margin: '20px', padding: '10px' }}>\r\n                        <h4>{currentModel}</h4>\r\n                    </Card>\r\n                    <Card bg='dark' text='white' style={{ margin: '20px', padding: '10px', display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                        {isLoading ? (\r\n                            <Spinner animation=\"grow\" variant=\"light\" />\r\n                        ) : currentModel === 'Directory' ? view === 'list' ? (\r\n                            <>\r\n                                <Table striped bordered hover variant=\"dark\">\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>Name</th>\r\n                                        <th>Subdirectories</th>\r\n                                        <th>Action</th>\r\n                                    </tr>\r\n                                    {directories.map((directoryMap) =>\r\n                                        <tr>\r\n                                            <td>\r\n                                                {directoryMap.id}\r\n                                            </td>\r\n                                            <td>\r\n                                                {directoryMap.name}\r\n                                            </td>\r\n                                            <td>\r\n                                                {directoryMap.subdirectories.map((subdirectoryMap) => subdirectoryMap.name + ', ')}\r\n                                            </td>\r\n                                            <td>\r\n                                                <Button variant='danger' style={{ margin: '2px' }} onClick={async () => {\r\n                                                    DeleteDirectoryById(directoryMap.id);\r\n                                                    document.location.href = '/admin';\r\n                                                }}><FiTrash2 /></Button>\r\n                                                <Button variant='success' style={{ margin: '2px' }} onClick={() => {\r\n                                                    setDirectory(directoryMap);\r\n                                                    setView('add');\r\n                                                }}><FiEdit /></Button>\r\n                                            </td>\r\n                                        </tr>)}\r\n                                </Table>\r\n                            </>\r\n                        ) : (\r\n                                <>\r\n                                    <Form style={{ margin: '20px', padding: '10px', display: \"block\", width: '100%' }}>\r\n                                        <Form.Label>ID</Form.Label>\r\n                                        <Form.Control value={directory !== '' ? directory.id : ''} disabled></Form.Control>\r\n                                        <Form.Label>Name</Form.Label>\r\n                                        <Form.Control onChange={async (e) => {\r\n                                            if (directory === '') {\r\n                                                await setDirectory({\r\n                                                    id: null,\r\n                                                    name: e.target.value,\r\n                                                    subdirectories: []\r\n                                                });\r\n                                            } else {\r\n                                                await setDirectory({\r\n                                                    id: directory.id,\r\n                                                    name: e.target.value,\r\n                                                    subdirectories: directory.subdirectories\r\n                                                });\r\n                                            }\r\n                                        }} value={directory !== '' ? directory.name : ''}></Form.Control>\r\n                                        <Form.Label> Subdirectories</Form.Label>\r\n                                        {directory !== '' ?\r\n                                            <Form.Control onChange={async (e) => {\r\n                                                var options = e.target.options;\r\n                                                var value = [];\r\n                                                for (var i = 0, l = options.length; i < l; i++) {\r\n                                                    if (options[i].selected) {\r\n                                                        value.push({ id: options[i].value });\r\n                                                    }\r\n                                                }\r\n                                                if (directory === '') {\r\n                                                    await setDirectory({\r\n                                                        id: null,\r\n                                                        name: '',\r\n                                                        subdirectories: value\r\n                                                    });\r\n                                                } else {\r\n                                                    await setDirectory({\r\n                                                        id: directory.id,\r\n                                                        name: directory.name,\r\n                                                        subdirectories: value\r\n                                                    });\r\n                                                }\r\n                                            }} as=\"select\" multiple>\r\n                                                {subdirectoriesUnassigned.map((subdirectoryMap) =>\r\n                                                    <option value={subdirectoryMap.id} selected={directory.subdirectories.includes(subdirectoryMap)}>{subdirectoryMap.name}</option>)}\r\n                                            </Form.Control>\r\n                                            :\r\n                                            <Form.Control onChange={(e) => {\r\n                                                var options = e.target.options;\r\n                                                var value = [];\r\n                                                for (var i = 0, l = options.length; i < l; i++) {\r\n                                                    if (options[i].selected) {\r\n                                                        value.push({ id: options[i].value });\r\n                                                    }\r\n                                                }\r\n                                                if (directory === '') {\r\n                                                    setDirectory({\r\n                                                        id: null,\r\n                                                        name: '',\r\n                                                        subdirectories: value\r\n                                                    });\r\n                                                } else {\r\n                                                    setDirectory({\r\n                                                        id: directory.id,\r\n                                                        name: directory.name,\r\n                                                        subdirectories: value\r\n                                                    });\r\n                                                }\r\n                                            }} as=\"select\" multiple>\r\n                                                {subdirectoriesUnassigned.map((subdirectoryMap) =>\r\n                                                    <option value={subdirectoryMap.id}>{subdirectoryMap.name}</option>)}\r\n                                            </Form.Control>\r\n                                        }\r\n                                    </Form>\r\n                                    <Button onClick={async () => {\r\n                                        var subs = []\r\n                                        if (directory !== '') {\r\n                                            for (var sub in directory.subdirectories) {\r\n                                                for (var i = 0; i < subdirectories.length; i++) {\r\n                                                    console.log(sub);\r\n                                                    if (subdirectories[i].id === parseInt(directory.subdirectories[sub].id)) {\r\n                                                        subs.push(subdirectories[i])\r\n                                                        break;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            console.log(subs);\r\n                                            if (directory.id !== null) {\r\n                                                await UpdateDirectory({\r\n                                                    id: directory.id,\r\n                                                    name: directory.name,\r\n                                                    subdirectories: subs\r\n                                                });\r\n                                            } else {\r\n                                                await CreateDirectory({\r\n                                                    id: directory.id,\r\n                                                    name: directory.name,\r\n                                                    subdirectories: subs\r\n                                                });\r\n                                            }\r\n                                            document.location.href = '/admin'\r\n                                        }\r\n                                    }}>{directory !== '' ? 'Update' : 'Create'}</Button>\r\n                                </>\r\n                            ) : currentModel === 'Subdirectory' ? view === 'list' ? (\r\n                                <>\r\n                                    <Table striped bordered hover variant=\"dark\">\r\n                                        <tr>\r\n                                            <th>ID</th>\r\n                                            <th>Name</th>\r\n                                            <th>Action</th>\r\n                                        </tr>\r\n                                        {subdirectories.map((subdirectoryMap) =>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    {subdirectoryMap.id}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {subdirectoryMap.name}\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Button variant='danger' style={{ margin: '2px' }} onClick={async () => {\r\n                                                        DeleteSubdirectoryById(subdirectoryMap.id);\r\n                                                        document.location.href = '/admin';\r\n                                                    }}><FiTrash2 /></Button>\r\n                                                    <Button variant='success' style={{ margin: '2px' }} onClick={() => {\r\n                                                        setSubdirectory(subdirectoryMap);\r\n                                                        setView('add');\r\n                                                    }}><FiEdit /></Button>\r\n                                                </td>\r\n                                            </tr>)}\r\n                                    </Table>\r\n                                </>\r\n                            ) : (\r\n                                    <>\r\n                                        <Form style={{ margin: '20px', padding: '10px', display: \"block\", width: '100%' }}>\r\n                                            <Form.Label>ID</Form.Label>\r\n                                            <Form.Control value={subdirectory !== '' ? subdirectory.id : ''} disabled></Form.Control>\r\n                                            <Form.Label>Name</Form.Label>\r\n                                            <Form.Control onChange={async (e) => {\r\n                                                if (subdirectory === '') {\r\n                                                    await setSubdirectory({\r\n                                                        id: null,\r\n                                                        name: e.target.value,\r\n                                                    });\r\n                                                } else {\r\n                                                    await setSubdirectory({\r\n                                                        id: subdirectory.id,\r\n                                                        name: e.target.value,\r\n                                                    });\r\n                                                }\r\n                                            }} value={subdirectory !== '' ? subdirectory.name : ''}></Form.Control>\r\n                                        </Form>\r\n                                        <Button onClick={async () => {\r\n                                            if (subdirectory !== '') {\r\n                                                if (subdirectory.id !== null) {\r\n                                                    await UpdateSubdirectory(subdirectory);\r\n                                                } else {\r\n                                                    await CreateSubdirectory(subdirectory);\r\n                                                }\r\n                                                document.location.href = '/admin'\r\n                                            }\r\n                                        }}>{subdirectory !== '' ? 'Update' : 'Create'}</Button>\r\n                                    </>\r\n                                ) : view === 'list' ? (\r\n                                    <>\r\n                                        <Table striped bordered hover variant=\"dark\">\r\n                                            <tr>\r\n                                                <th>ID</th>\r\n                                                <th>Name</th>\r\n                                                <th>Description</th>\r\n                                                <th>Subdirectory</th>\r\n                                                <th>Price: $</th>\r\n                                                <th>Stock Amount</th>\r\n                                                <th>Action</th>\r\n                                            </tr>\r\n                                            {products.map((productMap) =>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {productMap.id}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {productMap.name}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {productMap.description}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {productMap.subdirectory.name}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {productMap.price}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {productMap.stockAmount}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <Button variant='danger' style={{ margin: '2px' }} onClick={async () => {\r\n                                                            DeleteProductById(productMap.id);\r\n                                                            document.location.href = '/admin';\r\n                                                        }}><FiTrash2 /></Button>\r\n                                                        <Button variant='success' style={{ margin: '2px' }} onClick={() => {\r\n                                                            setProduct(productMap);\r\n                                                            setView('add');\r\n                                                        }}><FiEdit /></Button>\r\n                                                    </td>\r\n                                                </tr>)}\r\n                                        </Table>\r\n                                    </>\r\n                                ) : (\r\n                                            <>\r\n                                                <Form style={{ margin: '20px', padding: '10px', display: \"block\", width: '100%' }}>\r\n                                                    <Form.Group>\r\n                                                        <Form.Label htmlFor=\"id\">ID</Form.Label>\r\n                                                        <Form.Control id='id' value={product !== '' ? product.id : ''} disabled></Form.Control>\r\n                                                        <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                                                        <Form.Control id='name' onChange={e => {\r\n                                                            if (product === '') {\r\n                                                                setProduct({\r\n                                                                    id: null,\r\n                                                                    name: e.target.value,\r\n                                                                    description: '',\r\n                                                                    subdirectory: { id: null },\r\n                                                                    price: 0.00,\r\n                                                                    stockAmount: 0\r\n                                                                });\r\n                                                            } else {\r\n                                                                setProduct({\r\n                                                                    id: product.id,\r\n                                                                    name: e.target.value,\r\n                                                                    description: product.description,\r\n                                                                    subdirectory: product.subdirectory,\r\n                                                                    price: product.price,\r\n                                                                    stockAmount: product.stockAmount\r\n                                                                });\r\n                                                            }\r\n                                                        }} value={product !== '' ? product.name : ''}></Form.Control>\r\n                                                        <Form.Label htmlFor=\"description\">Description</Form.Label>\r\n                                                        <Form.Control id='description' onChange={e => {\r\n                                                            if (product === '') {\r\n                                                                setProduct({\r\n                                                                    id: null,\r\n                                                                    name: '',\r\n                                                                    description: e.target.value,\r\n                                                                    subdirectory: { id: null },\r\n                                                                    price: 0.00,\r\n                                                                    stockAmount: 0\r\n                                                                });\r\n                                                            } else {\r\n                                                                setProduct({\r\n                                                                    id: product.id,\r\n                                                                    name: product.name,\r\n                                                                    description: e.target.value,\r\n                                                                    subdirectory: product.subdirectory,\r\n                                                                    price: product.price,\r\n                                                                    stockAmount: product.stockAmount\r\n                                                                });\r\n                                                            }\r\n                                                        }} value={product !== '' ? product.description : ''}></Form.Control>\r\n                                                        <Form.Label htmlFor=\"subdirectories\"> Subdirectories</Form.Label>\r\n                                                        {product !== '' ?\r\n                                                            <Form.Control id='subdirectories' as=\"select\" onChange={e => {\r\n                                                                if (product === '') {\r\n                                                                    setProduct({\r\n                                                                        id: null,\r\n                                                                        name: '',\r\n                                                                        description: '',\r\n                                                                        subdirectory: { id: null },\r\n                                                                        price: e.target.value,\r\n                                                                        stockAmount: 0\r\n                                                                    });\r\n                                                                } else {\r\n                                                                    setProduct({\r\n                                                                        id: product.id,\r\n                                                                        name: product.name,\r\n                                                                        description: product.description,\r\n                                                                        subdirectory: { id: e.target.value },\r\n                                                                        price: product.price,\r\n                                                                        stockAmount: product.stockAmount\r\n                                                                    });\r\n                                                                }\r\n                                                            }}>\r\n                                                                {subdirectories.map((subdirectoryMap) =>\r\n                                                                    <option value={subdirectoryMap.id} selected={product.subdirectory.id === subdirectoryMap.id}>{subdirectoryMap.name}</option>)}\r\n                                                            </Form.Control>\r\n                                                            :\r\n                                                            <Form.Control id='subdirectories' as=\"select\" onChange={e => {\r\n                                                                if (product === '') {\r\n                                                                    setProduct({\r\n                                                                        id: null,\r\n                                                                        name: '',\r\n                                                                        description: '',\r\n                                                                        subdirectory: { id: null },\r\n                                                                        price: e.target.value,\r\n                                                                        stockAmount: 0\r\n                                                                    });\r\n                                                                } else {\r\n                                                                    setProduct({\r\n                                                                        id: product.id,\r\n                                                                        name: product.name,\r\n                                                                        description: product.description,\r\n                                                                        subdirectory: { id: e.target.value },\r\n                                                                        price: product.price,\r\n                                                                        stockAmount: product.stockAmount\r\n                                                                    });\r\n                                                                }\r\n                                                            }}>\r\n                                                                {subdirectories.map((subdirectoryMap) =>\r\n                                                                    <option value={subdirectoryMap.id}>{subdirectoryMap.name}</option>)}\r\n                                                            </Form.Control>\r\n                                                        }\r\n                                                        <Form.Label htmlFor=\"price\">Price</Form.Label>\r\n                                                        <Form.Control id='price' onChange={e => {\r\n                                                            if (product === '') {\r\n                                                                setProduct({\r\n                                                                    id: null,\r\n                                                                    name: '',\r\n                                                                    description: '',\r\n                                                                    subdirectory: { id: null },\r\n                                                                    price: e.target.value,\r\n                                                                    stockAmount: 0\r\n                                                                });\r\n                                                            } else {\r\n                                                                setProduct({\r\n                                                                    id: product.id,\r\n                                                                    name: product.name,\r\n                                                                    description: product.description,\r\n                                                                    subdirectory: product.subdirectory,\r\n                                                                    price: e.target.value,\r\n                                                                    stockAmount: product.stockAmount\r\n                                                                });\r\n                                                            }\r\n                                                        }} min='0' step=\"0.01\" type='number' value={product !== '' ? product.price : 0.00}></Form.Control>\r\n                                                        <Form.Label htmlFor=\"stock_amount\">Stock Amount</Form.Label>\r\n                                                        <Form.Control id='stock_amount' onChange={e => {\r\n                                                            if (product === '') {\r\n                                                                setProduct({\r\n                                                                    id: null,\r\n                                                                    name: '',\r\n                                                                    description: '',\r\n                                                                    subdirectory: { id: null },\r\n                                                                    price: e.target.value,\r\n                                                                    stockAmount: 0\r\n                                                                });\r\n                                                            } else {\r\n                                                                setProduct({\r\n                                                                    id: product.id,\r\n                                                                    name: product.name,\r\n                                                                    description: product.description,\r\n                                                                    subdirectory: product.subdirectory,\r\n                                                                    price: product.price,\r\n                                                                    stockAmount: e.target.value\r\n                                                                });\r\n                                                            }\r\n                                                        }} min='0' step=\"1\" type='number' value={product !== '' ? product.stockAmount : 0}></Form.Control>\r\n                                                    </Form.Group>\r\n                                                </Form>\r\n                                                <Button onClick={async () => {\r\n                                                    if (product !== '') {\r\n                                                        for (var i = 0; i < subdirectories.length; i++) {\r\n                                                            if (subdirectories[i].id === parseInt(product.subdirectory.id)) {\r\n                                                                await setProduct({\r\n                                                                    id: product.id,\r\n                                                                    name: product.name,\r\n                                                                    description: product.description,\r\n                                                                    subdirectory: subdirectories[i],\r\n                                                                    price: product.price,\r\n                                                                    stockAmount: product.stockAmount\r\n                                                                });\r\n                                                                break;\r\n                                                            }\r\n                                                        }\r\n                                                        if (product.id !== null) {\r\n                                                            await UpdateProduct(product);\r\n                                                        } else {\r\n                                                            await CreateProduct(product);\r\n                                                        }\r\n                                                        document.location.href = '/admin'\r\n                                                    }\r\n                                                }}>{product !== '' ? 'Update' : 'Create'}</Button>\r\n                                            </>\r\n                                        )}\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Admin;",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":52,"column":8,"nodeType":"95","endLine":52,"endColumn":10,"suggestions":"96"},{"ruleId":"93","severity":1,"message":"94","line":29,"column":8,"nodeType":"95","endLine":29,"endColumn":10,"suggestions":"97"},{"ruleId":"98","severity":1,"message":"99","line":15,"column":22,"nodeType":"100","messageId":"101","endLine":15,"endColumn":33},{"ruleId":"102","severity":1,"message":"103","line":77,"column":37,"nodeType":"104","endLine":83,"endColumn":40},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["107"],["108"],"no-unused-vars","'setProducts' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},{"desc":"109","fix":"111"},"Update the dependencies array to be: [fetchData]",{"range":"112","text":"113"},{"range":"114","text":"113"},[1741,1743],"[fetchData]",[700,702]]